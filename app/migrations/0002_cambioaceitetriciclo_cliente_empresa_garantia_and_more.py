# Generated by Django 5.1.6 on 2025-08-06 17:21

import datetime
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CambioAceiteTriciclo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(default=datetime.date.today, verbose_name='Fecha del cambio de aceite')),
                ('km300', models.BooleanField(default=False, help_text='¿Se realizó el cambio a los 300 km?', verbose_name='300 km')),
                ('km600', models.BooleanField(default=False, help_text='¿Se realizó el cambio a los 600 km?', verbose_name='600 km')),
                ('km1000', models.BooleanField(default=False, help_text='¿Se realizó el cambio a los 1000 km?', verbose_name='1000 km')),
                ('kilometros', models.PositiveIntegerField(help_text='Kilometraje al momento del cambio', verbose_name='Kilómetros reales')),
                ('foto', models.ImageField(blank=True, null=True, upload_to='cambios_aceite/fotos/', verbose_name='Foto del kilometraje/cambio')),
                ('comentario', models.TextField(blank=True, verbose_name='Comentario')),
                ('aprobado', models.BooleanField(default=False, verbose_name='Aprobado')),
                ('no_paso_garantia', models.BooleanField(default=False, verbose_name='No pasó la garantía')),
            ],
            options={
                'verbose_name': 'Cambio de aceite (triciclo)',
                'verbose_name_plural': 'Cambios de aceite (triciclos)',
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(blank=True, max_length=100)),
                ('apellidos', models.CharField(blank=True, max_length=100)),
                ('carnet', models.CharField(blank=True, max_length=50, verbose_name='Carnet')),
                ('direccion', models.TextField(blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('telefono', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'Registro de T.C.P/P.N',
                'verbose_name_plural': 'Registros de T.C.P/P.N',
            },
        ),
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(blank=True, max_length=100)),
                ('nit', models.CharField(blank=True, max_length=255, verbose_name='NIT')),
                ('direccion', models.TextField(blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('telefono', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'Registro de MIPYME',
                'verbose_name_plural': 'Registros de MIPYME',
            },
        ),
        migrations.CreateModel(
            name='Garantia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motivo', models.TextField(max_length=255, verbose_name='Motivo')),
                ('evaluacion', models.TextField(max_length=255, verbose_name='Evaluacion resumen')),
                ('trabajos_hechos', models.TextField(max_length=255, verbose_name='Trabajos realizados')),
                ('piezas_usadas', models.TextField(max_length=255, verbose_name='Lista de piezas usadas')),
                ('recomendaciones', models.TextField(max_length=255, verbose_name='Algunas recomendaciones')),
                ('nombre_especialista', models.CharField(choices=[('abraham pino valdes', 'Abraham Pino Valdes'), ('juan', 'Juan'), ('jose', 'Jose'), ('ailet', 'Ailet'), ('tamara', 'Tamara'), ('dago', 'Dago'), ('roberto', 'Roberto')], max_length=255, verbose_name='Especialista encargado')),
                ('conformidad_cliente', models.BooleanField(verbose_name='Conformidad del cliente')),
                ('cliente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cliente')),
                ('empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.empresa')),
            ],
            options={
                'verbose_name': 'Reporte de Reclamacion',
                'verbose_name_plural': 'Reporte de Reclamaciones',
            },
        ),
        migrations.CreateModel(
            name='Garantia_P',
            fields=[
                ('num', models.CharField(help_text='Se genera automaticamente y es secuencial en el formato PS###/YYYY', primary_key=True, serialize=False, verbose_name='Numero de Garantia')),
                ('fecha_em', models.DateField(default=datetime.date(2025, 8, 6), verbose_name='Fecha de Emision')),
                ('condiciones_generales', models.TextField(default='- La estación de energía incluye una garantía de 1 año contra defectos de fabricación.\n- El panel solar incluye una garantía de 2 años y cubre defectos de fabricación.\n- La garantía del generador solar no cubre daños por uso inadecuado, accidentes o modificaciones no autorizadas.\n- Si el producto se usa de manera incorrecta o no según las instrucciones del fabricante, la garantía no cubrirá los daños resultantes.', help_text='Condiciones generales de la garantía por defecto', verbose_name='Condiciones Generales de Garantía')),
                ('exclusiones_garantia', models.TextField(default='- Daños por uso incorrecto o negligencia.\n- Modificaciones o reparaciones no autorizadas.\n- Desgaste normal de la batería.\n- Daños por factores externos (sobretensiones, rayos, inundaciones, etc.).\n- Uso en condiciones extremas fuera de los rangos especificados.\n- Falta de mantenimiento según instrucciones del fabricante.\n- Consumibles o accesorios (cables, adaptadores).\n- Daños por software no autorizado.\n- Daños cosméticos (arañazos, abolladuras) que no afectan el funcionamiento.', help_text='Lista de situaciones que no están cubiertas por la garantía', verbose_name='Exclusiones de la Garantía')),
                ('condiciones_reparacion', models.TextField(default='Cuando surjan problemas comunes como:\n- Fallos en la batería (pérdida de capacidad, incapacidad de cargarse).\n- Problemas con los puertos de salida (USB, CA, DC).\n- Errores en la pantalla LCD o interfaz de usuario.\n- Fallos en el sistema de gestión de energía (sobrecalentamiento, cortocircuitos).\n\nEl técnico autorizado evaluará el problema y determinará si está cubierto por la garantía.', help_text='Condiciones y procedimientos para reparaciones cubiertas por garantía', verbose_name='Condiciones de Reparación')),
                ('condiciones_sustitucion', models.TextField(default='Situaciones que justifican la sustitución:\n- El problema no puede repararse de manera económica o efectiva.\n- El dispositivo tiene un defecto de fábrica grave.\n- Todo ello será avalado por el fabricante.', help_text='Condiciones bajo las cuales se reemplazará el producto', verbose_name='Condiciones de Sustitución')),
                ('politicas_costos', models.TextField(default='- Cubierto por la garantía: Reparación o sustitución gratuita.\n- No cubierto por la garantía: Cliente paga costos de reparación/sustitución.\n- En caso de defecto de fabricación cubierto, nos comprometemos a reparar o reemplazar su estación de energía.', help_text='Políticas sobre costos de reparación y sustitución', verbose_name='Políticas de Costos')),
                ('procedimiento_reclamo', models.TextField(default='1. Contacto: Llamar a Tamara Reinosa Ferrer (asistencia técnica y garantía Fueta International) al celular 59423597 o escribir por WhatsApp al mismo número.\n2. Revisión: Presentar la factura de compra y modelo de garantía.\n3. Evaluación: El equipo técnico determinará si aplica la garantía.\n4. Solución: Se procederá con la reparación, reemplazo o reembolso según corresponda.', help_text='Pasos a seguir para hacer un reclamo de garantía', verbose_name='Procedimiento para Reclamo')),
                ('cliente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cliente')),
                ('empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.empresa')),
            ],
            options={
                'verbose_name': 'Registro de Garantia',
                'verbose_name_plural': 'Registros de Garantia',
            },
        ),
        migrations.CreateModel(
            name='Panels',
            fields=[
                ('id', models.CharField(primary_key=True, serialize=False, verbose_name='ID')),
                ('kit', models.CharField(max_length=255, verbose_name='Kit de Montaje')),
                ('aut', models.BooleanField(default=False, help_text='El kit se autorizara solo por el encargado de ello', verbose_name='Kit Autorizado')),
                ('cuchilla', models.CharField(choices=[('manual', 'Manual'), ('automatica', 'Automatica')], max_length=255, verbose_name='Cuchilla')),
                ('act', models.CharField(choices=[('si', 'Si'), ('no', 'No')], max_length=255, verbose_name='Actualizacion de Software')),
                ('num', models.CharField(default=uuid.uuid4, max_length=255, verbose_name='Numero de Serie')),
            ],
            options={
                'verbose_name': 'Panel Solar',
                'verbose_name_plural': 'Paneles Solares',
            },
        ),
        migrations.CreateModel(
            name='Power_Station',
            fields=[
                ('sn', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_armado', models.DateField(default=datetime.datetime.now, verbose_name='Fecha de Compra')),
                ('tipo', models.CharField(choices=[('300w', '300W'), ('600w', '600W'), ('1200w', '1200W'), ('2400w', '2400W'), ('3000w', '3000W')], max_length=10, verbose_name='Tipo')),
                ('w', models.IntegerField(editable=False, verbose_name='Potencia/Capacidad(Watts)')),
                ('paneles', models.IntegerField(editable=False, verbose_name='Paneles')),
                ('expansiones', models.IntegerField(editable=False, verbose_name='Expansiones')),
                ('bases', models.IntegerField(editable=False, verbose_name='Bases de Paneles')),
                ('modelo', models.CharField(default='Longi', help_text='Modelo por defecto de las Power_Stations', max_length=255, verbose_name='Modelo')),
                ('marca', models.CharField(default='Perro Rojo', help_text='Marca por defecto de las Power_Stations', verbose_name='Marca')),
                ('dist', models.CharField(choices=[('donki', 'Donki'), ('fueta', 'Fueta'), ('mkl', 'MKL')], max_length=255, verbose_name='Ditribuidora/Tienda')),
                ('dist_client', models.CharField(default='', max_length=255, verbose_name='Cliente de Distribuidora')),
                ('vendido', models.BooleanField(default=False, help_text='Cuando se realice una relacion de venta de power station se vera reflejado aqui', verbose_name='Vendido')),
                ('fecha_v', models.DateField(blank=True, default=None, help_text='Al marcarse como vendida una power station la fecha se actualiza', null=True, verbose_name='Fecha de Venta')),
                ('video', models.FileField(blank=True, help_text='Video de la power station', null=True, upload_to='ventas/videos/', verbose_name='Video')),
                ('foto', models.ImageField(blank=True, help_text='Foto de la power station', null=True, upload_to='ventas/fotos/', verbose_name='Foto')),
            ],
        ),
        migrations.CreateModel(
            name='PowerStationPanel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('panel', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app.panels')),
                ('power_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.power_station')),
            ],
        ),
        migrations.CreateModel(
            name='Registro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_entregado', models.DateField(blank=True, null=True, verbose_name='Fecha entregado')),
                ('tiempoR', models.IntegerField(editable=False, verbose_name='Tiempo Restante')),
                ('numero_reporte', models.IntegerField(editable=False, unique=True)),
                ('llamada', models.TextField(blank=True, verbose_name='Reportar por correo(Especificar motivo)')),
                ('receptor', models.CharField(blank=True, help_text='Selecciona uno o varios receptores, o Todos', max_length=255, verbose_name='Receptor(es) del correo')),
                ('video', models.FileField(blank=True, help_text='Video de la venta de triciclo', null=True, upload_to='ventas/videos/', verbose_name='Video de la venta')),
                ('foto', models.ImageField(blank=True, help_text='Foto de la venta de triciclo', null=True, upload_to='ventas/fotos/', verbose_name='Foto de la venta')),
                ('cliente', models.ForeignKey(blank=True, help_text='Cliente a ser Reportado', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cliente')),
                ('empresa', models.ForeignKey(blank=True, help_text='Empresa a ser Reportada', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.empresa')),
            ],
            options={
                'verbose_name': 'Relacion de venta',
                'verbose_name_plural': 'Relacion de ventas',
            },
        ),
        migrations.CreateModel(
            name='Registro_ps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_entregado', models.DateField(blank=True, null=True, verbose_name='Fecha entregado')),
                ('tiempoR', models.IntegerField(editable=False, verbose_name='Tiempo Restante(PowerStation)')),
                ('tiempoR_pan', models.IntegerField(editable=False, verbose_name='Tiempo Restante(Paneles)')),
                ('numero_reporte', models.IntegerField(editable=False, unique=True)),
                ('llamada', models.TextField(blank=True, verbose_name='Reportar por correo(Especificar motivo)')),
                ('receptor', models.CharField(blank=True, help_text='Selecciona uno o varios receptores, o Todos', max_length=255, verbose_name='Receptor(es) del correo')),
                ('video', models.FileField(blank=True, help_text='Video de la venta de power station', null=True, upload_to='ventas/videos/', verbose_name='Video de la venta')),
                ('foto', models.ImageField(blank=True, help_text='Foto de la venta de power station', null=True, upload_to='ventas/fotos/', verbose_name='Foto de la venta')),
                ('cliente', models.ForeignKey(blank=True, help_text='Cliente a ser Reportado', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cliente')),
                ('empresa', models.ForeignKey(blank=True, help_text='Empresa a ser Reportada', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.empresa')),
                ('power_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.power_station')),
            ],
            options={
                'verbose_name': 'Relacion de venta',
                'verbose_name_plural': 'Relacion de ventas',
            },
        ),
        migrations.CreateModel(
            name='Triciclo',
            fields=[
                ('vin', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Vin')),
                ('fecha_armado', models.DateField(default=datetime.datetime.now, help_text='Fecha en que se armo el triciclo')),
                ('num_m', models.CharField(blank=True, max_length=255, verbose_name='Numero de Motor')),
                ('sello', models.CharField(blank=True, max_length=255)),
                ('extensor_rango', models.CharField(blank=True, max_length=255)),
                ('fecha_autorizado', models.DateField(blank=True, help_text='Aparecera automaticamente al autorizar el triciclo', null=True)),
                ('autorizado', models.BooleanField(default=False, help_text='El triciclo se autorizara solo por el encargado de ello')),
                ('obser', models.TextField(help_text='Algunas observaciones sobre el triciclo que pueden ser modificadas a lo largo del tiempo', verbose_name='Observaciones adicionales')),
                ('modelo', models.CharField(choices=[('TY150UK', 'TY150UK'), ('triciclo eléctrico de carga HK', 'TRICICLO ELÉCTRICO DE CARGA HK'), ('triciclo eléctrico con panel solar HY', 'TRICICLO ELÉCTRICO CON PANEL SOLAR HY'), ('moto RY', 'MOTO RY'), ('CUATRICICLO T90', 'CUATRICICLO T90'), ('DSL PRO', 'DSL PRO'), ('JL', 'JL'), ('WARE FRAME', 'WARE FRAME')], help_text='Modelo del Triciclo', max_length=255, verbose_name='Modelo')),
                ('vendido', models.BooleanField(default=False, help_text='Cuando se realice una relacion de venta de triciclo se vera reflejado aqui', verbose_name='Vendido')),
                ('fecha_v', models.DateField(blank=True, default=None, help_text='Al marcarse como vendido un triciclo la fecha se actualiza', null=True, verbose_name='Fecha de Venta')),
                ('video', models.FileField(blank=True, help_text='Video del armado del triciclo', null=True, upload_to='videos/', verbose_name='Video')),
                ('imagen', models.ImageField(blank=True, help_text='Imagen del triciclo armado', null=True, upload_to='imagenes/', verbose_name='Imagen')),
            ],
            options={
                'verbose_name': 'Triciclo Armado',
                'verbose_name_plural': 'Triciclos Armados',
            },
        ),
        migrations.DeleteModel(
            name='Reporte',
        ),
        migrations.AddField(
            model_name='cambioaceitetriciclo',
            name='cliente',
            field=models.ForeignKey(blank=True, help_text='Cliente que realizó el cambio', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cliente'),
        ),
        migrations.AddField(
            model_name='cambioaceitetriciclo',
            name='empresa',
            field=models.ForeignKey(blank=True, help_text='Empresa que realizó el cambio', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.empresa'),
        ),
        migrations.AddField(
            model_name='garantia_p',
            name='power_station',
            field=models.ForeignKey(blank=True, help_text='Aca estaran los datos especificos de la Power Station y sus paneles asociados, acceder para ver detalles.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.power_station'),
        ),
        migrations.AddField(
            model_name='garantia',
            name='power_station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.power_station'),
        ),
        migrations.AddField(
            model_name='registro',
            name='triciclo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.triciclo'),
        ),
        migrations.AddField(
            model_name='garantia',
            name='triciclo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.triciclo'),
        ),
        migrations.AddField(
            model_name='cambioaceitetriciclo',
            name='triciclo',
            field=models.ForeignKey(help_text='Triciclo asociado al cambio de aceite', on_delete=django.db.models.deletion.CASCADE, to='app.triciclo'),
        ),
    ]
